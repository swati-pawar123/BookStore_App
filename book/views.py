from django.shortcuts import render,HttpResponse,redirect
# import ModelForm
from book.form import BookForm
# import book model
from book.models import Book
import os

# Create your views here.

# crud-create retrive update and delete

#For retrieving we use index
def index(request):     #for homepage we will use index
    store=Book.objects.all()  # select all from book
    return render(request,'index.html',{'book_store':store})

# to create a new book
def upload_book(request):
    # Using ModelForm to specify the view or to update views
    obj=BookForm()  #initially its empty

    if request.method=="POST":
        #Once the form fields are submitted,
        # fetch form parameters using request
        obj=BookForm(request.POST,request.FILES) #it fetch the data and save it to obj

        # Once we get form fields(data entered by the user)
        # we will validate it
        # to validate form fields
        if obj.is_valid():
            # save the accepted form data
            obj.save() #commit is bydefault is true
            # once form data or book instance is saved by backend
            # we will show that book instance on homepage
            return redirect('index')
        else:
            return HttpResponse("<H1>Something is wrong</H1>,reload <a href='{{url:'index'}}'>reload</a>")
    else:
        # To initially display Blank form to user so that user can fill the details
        return render(request, "upload.html", {'upload_form': obj})

# Update
def update(request, book_id):
    book_id = int(book_id)  # to convert in integer(because python and sql datatype is different)
    try:
        # id is autogeneration field
        # using id to fetch particular book details to update
        book_selected = Book.objects.get(id=book_id)
    except Book.DoesNotExist:
        return redirect('index')
    else:
        #  to displaying form with filled data
        # to display the form fields
        bk_form = BookForm(request.POST or None, instance=book_selected)
        # after getting form view with all fields
        # update required fields
        if bk_form.is_valid():
            old_image=""
            if book_selected.cover:
                old_image = book_selected.cover.path
                # data/fields are updated
                form=BookForm(request.POST,request.FILES,instance=book_selected)
                if form.is_valid():
                # if you found image at specified location,remove it
                    if os.path.exists(old_image):
                        os.remove(old_image)
                # updated fields will be saved
                        form.save()
            # bk_form.save(commit=False)
            # bk_form.save()
            return redirect('index')
        else:
            return render(request, 'upload.html', {'upload_form': bk_form})

# Delete
# sql queries performed by backend
# update book set name="where book_id=1"
# delete from book where book_id=1
def delete(request,book_id):
    book_id = int(book_id)  # to convert in integer(because python and sql datatype is different)
    try:
        # id is autogenerated field
        # using id to fetch particular book details to update
        book_selected = Book.objects.get(id=book_id)
    except Book.DoesNotExist:
        return redirect('index')
    book_selected.delete()
    return redirect('index')
